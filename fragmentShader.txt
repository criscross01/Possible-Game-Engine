#version 330 core
out vec4 FragColor;

uniform vec3 color;
uniform vec3 lightPos;
uniform vec3 viewPos;

in vec3 Normal;
in vec3 FragPos;

void main()
{
    float ambience = 0.1f;
    vec3 ambient = ambience * vec3(1.0f,1.0f,1.0f);

    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm,lightDir),0.0f);
    vec3 diffuse = diff * vec3(1.0f,1.0f,1.0f);

    float specStrength = 0.5f;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specStrength * spec * vec3(1.0f,1.0f,1.0f);

    vec3 result = (ambient + diffuse + specular) * color;
    FragColor = vec4(result,1.0f);
}
